import json
import csv

# makes gog and magog triangles


#######################################
## LaTeX formatted triangles

def print_gog(gog_list, offset):
    n = len(gog_list);

    print('\\begin{tikzpicture}[scale=.25]')
    print('\\node at (%d,0) {%s gog: $%s$};' % (14, offset, str(gog_list)) )

    for z in range(n):
        for x in range(n-z):
            for y in range(n-z-x):
                if y < gog_list[x][z]:
                    print('\\cube{%s}{%s}{%s};' % gog_coord(x,y,z))
                else:
                    print('\\cubex{%s}{%s}{%s};' % gog_coord(x,y,z))


#    print('\\end{scope}')
    print('\\end{tikzpicture}')

def gog_coord(x,y,z):
    return (x, z, 3*y)


def print_magog(magog_list, offset):
    n = len(magog_list);

    print('\\begin{tikzpicture}[scale=.25]')
#    print('\\begin{scope}[shift={(0,%d)}]' % (-5*offset))
    print('\\node at (%d,0) {%s magog: $%s$};' % (14 , offset, str(magog_list)) )

    for z in range(n):
        for x in range(n-z):
            for y in range(n-z-x):
                #print('x,y,idx, value', x, y, idx, gog_list[x][idx])
                if y < magog_list[x][z]:
                    print('\\cube{%s}{%s}{%s};' % magog_coord(x,y,z))
                else:
                    print('\\cubex{%s}{%s}{%s};' % magog_coord(x,y,z))


#    print('\\end{scope}')
    print('\\end{tikzpicture}')

def magog_coord(x,y,z):
    return (x,z,3*y)


#####################################
## MAGOG

magog2 = (
    [[2, 1], [1,]],
    [[2, 1], [0,]],
    [[1, 1], [1,]],
    [[1, 1], [0,]],
    [[1, 0], [1,]],
    [[1, 0], [0,]],
    [[0, 0], [0,]],
)


def magog_base_list(n):

    if n == 1:
        return [[0,], [1,]]
    else:
        retval = []
        #print('n=', n)
        previous_base_list = magog_base_list(n-1)

        for base in previous_base_list:
            #print(base)
            last_list = range(max(base),n+1)

            temp = [ base + [ x] for x in last_list]

            retval = retval + temp

        return retval

def build_magog(n):
    if n == 1:
        return [[[0,],], [[1,],]]
    else:
        retval = []
        base_list = magog_base_list(n)
        previous_list = build_magog(n-1)

        for base in base_list:
            for previous in previous_list:
                #print(base, previous)
                temp = previous[0] + [0,]
                diff = [b - t for (b,t) in zip(base, temp)]
                #print('\t', diff)
                if not any(d < 0 for d in diff):
                    newval = [base,] + previous
                    retval = retval + [newval,]
        return retval



def kagog_base_list(n):

    if n == 2:
        return [[0,], [1,]]
    else:
        retval = []
        #print('n=', n)
        previous_base_list = kagog_base_list(n-1)

        for base in previous_base_list:
            #print(base)
            if max(base) == 0:
                last_list = range(max(base),n)
            else:
                last_list = range(max(base)+1,n)

            temp = [ base + [ x] for x in last_list]

            retval = retval + temp

        return retval

def build_kagog(n):
    if n == 1:
        return []
    elif n == 2:
        return [[[0,],], [[1,],]]
    else:
        retval = []
        base_list = kagog_base_list(n)
        print(base_list)
        previous_list = build_kagog(n-1)

        for base in base_list:
            for previous in previous_list:
                #print(base, previous)
                temp = previous[0] + [n-1,]
                diff = [b - t for (b,t) in zip(base, temp)]
                #print('\t', diff)
                if not any(d > 0 for d in diff):
                    newval = [base,] + previous
                    retval = retval + [newval,]
                else:
                    print('rejecting base', base, 'previous', previous, 'diff', diff)
        return retval

def build_lagog(n):
    if n == 1:
        return []
    elif n == 2:
        return [[[0,],], [[1,],]]
    else:
        retval = []
        base_list = kagog_base_list(n)
        print(base_list)
        previous_list = build_lagog(n-1)

        for base in base_list:
            for previous in previous_list:
                #print(base, previous)
                temp = [0,] + previous[0]
                print('\t', base, temp)
                diff = [b - t for (b,t) in zip(base, temp)]
                print('\t\t', diff)
                if not any(d < 0 for d in diff):
                    newval = [base,] + previous
                    retval = retval + [newval,]
                else:
                    print('rejecting base', base, 'previous', previous, 'diff', diff)
        return retval



##############
## GOG


gog2 = (
    ((2, 1), (1,)),
    ((2, 1), (0,)),
    ((1, 1), (1,)),
    ((1, 1), (0,)),
    ((1, 0), (0,)),
    ((0, 1), (0,)),
    ((0, 0), (0,)),
)

# gog3 = (((0, 0, 0), (0, 0), (0,)), ((0, 0, 1), (0, 0), (0,)), ((0, 1, 0), (0,
#    0), (0,)), ((0, 1, 1), (0, 1), (0,)), ((0, 2, 1), (0, 0), (0,)), ((0,
#    2, 1), (0, 1), (0,)), ((1, 0, 0), (0, 0), (0,)), ((1, 0, 1), (0,
#    0), (0,)), ((1, 1, 0), (1, 0), (0,)), ((1, 1, 1), (1, 1), (1,)), ((1,
#    2, 1), (1, 0), (0,)), ((1, 2, 1), (1, 1), (1,)), ((2, 1, 0), (0,
#    0), (0,)), ((2, 1, 1), (0, 1), (0,)), ((2, 1, 0), (1, 0), (0,)), ((2,
#    1, 1), (1, 1), (1,)), ((2, 2, 1), (2, 1), (0,)), ((2, 2, 1), (2,
#    1), (1,)), ((3, 2, 1), (0, 0), (0,)), ((3, 2, 1), (0, 1), (0,)), ((3,
#    2, 1), (1, 0), (0,)), ((3, 2, 1), (1, 1), (1,)), ((3, 2, 1), (2,
#    1), (0,)), ((3, 2, 1), (2, 1), (1,)), ((0, 1, 1), (0, 0), (0,)), ((1,
#    1, 1), (1, 0), (0,)), ((2, 1, 1), (1, 1), (0,)), ((3, 2, 1), (1,
#    1), (0,)), ((2, 2, 1), (1, 1), (1,)), ((2, 2, 1), (0, 1), (0,)), ((1,
#    2, 1), (0, 0), (0,)), ((1, 1, 0), (0, 0), (0,)), ((1, 1, 1), (0,
#    1), (0,)), ((1, 2, 1), (0, 1), (0,)), ((1, 2, 1), (1, 1), (0,)), ((1,
#    1, 1), (1, 1), (0,)), ((1, 1, 1), (0, 0), (0,)), ((2, 2, 1), (1,
#    0), (0,)), ((2, 2, 1), (0, 0), (0,)), ((2, 1, 1), (0, 0), (0,)), ((2,
#    1, 1), (1, 0), (0,)), ((2, 2, 1), (1, 1), (0,)))


gog3 = [[[0, 0, 0], [0, 0], [0,]], [[0, 0, 1], [0, 0], [0,]], [[0, 1, 0], [0,
   0], [0,]], [[0, 1, 1], [0, 1], [0,]], [[0, 2, 1], [0, 0], [0,]], [[0,
   2, 1], [0, 1], [0,]], [[1, 0, 0], [0, 0], [0,]], [[1, 0, 1], [0,
   0], [0,]], [[1, 1, 0], [1, 0], [0,]], [[1, 1, 1], [1, 1], [1,]], [[1,
   2, 1], [1, 0], [0,]], [[1, 2, 1], [1, 1], [1,]], [[2, 1, 0], [0,
   0], [0,]], [[2, 1, 1], [0, 1], [0,]], [[2, 1, 0], [1, 0], [0,]], [[2,
   1, 1], [1, 1], [1,]], [[2, 2, 1], [2, 1], [0,]], [[2, 2, 1], [2,
   1], [1,]], [[3, 2, 1], [0, 0], [0,]], [[3, 2, 1], [0, 1], [0,]], [[3,
   2, 1], [1, 0], [0,]], [[3, 2, 1], [1, 1], [1,]], [[3, 2, 1], [2,
   1], [0,]], [[3, 2, 1], [2, 1], [1,]], [[0, 1, 1], [0, 0], [0,]], [[1,
   1, 1], [1, 0], [0,]], [[2, 1, 1], [1, 1], [0,]], [[3, 2, 1], [1,
   1], [0,]], [[2, 2, 1], [1, 1], [1,]], [[2, 2, 1], [0, 1], [0,]], [[1,
   2, 1], [0, 0], [0,]], [[1, 1, 0], [0, 0], [0,]], [[1, 1, 1], [0,
   1], [0,]], [[1, 2, 1], [0, 1], [0,]], [[1, 2, 1], [1, 1], [0,]], [[1,
   1, 1], [1, 1], [0,]], [[1, 1, 1], [0, 0], [0,]], [[2, 2, 1], [1,
   0], [0,]], [[2, 2, 1], [0, 0], [0,]], [[2, 1, 1], [0, 0], [0,]], [[2,
   1, 1], [1, 0], [0,]], [[2, 2, 1], [1, 1], [0,]]]

mono_triangle4 = [[[4, 3, 2, 1], [3, 2, 1], [2, 1], [1, ]],
                  [[4, 3, 2, 1], [3, 2, 1], [2, 1], [2, ]],
                  [[4, 3, 2, 1], [3, 2, 1], [3, 1], [1, ]],
                  [[4, 3, 2, 1], [3, 2, 1], [3, 1], [2, ]],
                  [[4, 3, 2, 1], [3, 2, 1], [3, 1], [3, ]],
                  [[4, 3, 2, 1], [3, 2, 1], [3, 2], [2, ]],
                  [[4, 3, 2, 1], [3, 2, 1], [3, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [2, 1], [1, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [2, 1], [2, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [3, 1], [1, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [3, 1], [2, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [3, 1], [3, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [3, 2], [2, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [3, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 1], [1, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 1], [2, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 1], [3, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 1], [4, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 2], [2, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 2, 1], [4, 2], [4, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [3, 1], [1, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [3, 1], [2, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [3, 1], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [3, 2], [2, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [3, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 1], [1, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 1], [2, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 1], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 1], [4, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 2], [2, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 2], [4, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 3], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 1], [4, 3], [4, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [3, 2], [2, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [3, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [4, 2], [2, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [4, 2], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [4, 2], [4, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [4, 3], [3, ]],
                  [[4, 3, 2, 1], [4, 3, 2], [4, 3], [4, ]],
                  ]


mono_triangle5 = [[[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [3, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 2, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [4, 3, 2, 1], [4, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [3, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 2, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [4, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 2, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 1], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 2, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [4, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [2, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [2, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 2, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 1], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 3, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 1], [5, 4], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 2, 1], [5, 4, 2], [5, 4], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [4, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [3, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [3, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [3, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 1], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 3, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 1], [1,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 1], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 1], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 1], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 1], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 1], [5, 4], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 2], [5, 4], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 1], [5, 4, 3], [5, 4], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [4, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [3, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [3, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 3, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [4, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [4, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [4, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 2], [2,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 2], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 2], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 2], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 2], [5, 4], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [4, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [4, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [5, 3], [3,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [5, 3], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [5, 3], [5,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [5, 4], [4,]],
                  [[5, 4, 3, 2, 1], [5, 4, 3, 2], [5, 4, 3], [5, 4], [5,]],
                  ]


def max_gog(n):
    current_row = [list(range(n,0,-1)),]
    if n <= 1:
        previous_list = []
    else:
        previous_list = max_gog(n-1)

    ret_val = current_row + previous_list

    return ret_val





def rotate_triangle(triangle):
    #print(len(triangle))
    retval = [[] for line in triangle]

    for line in triangle:
        for idx,x in enumerate(line):
            retval[idx].append(x)
            #print(retval)

    #retval = [ list(reversed(x)) for x in retval]

    return retval


def rotate_triangle_old(triangle):
    #print(len(triangle))
    retval = [[] for line in triangle]

    for line in triangle:
        for idx,x in enumerate(reversed(line)):
            retval[idx].append(x)
            #print(retval)

    #retval = [ list(reversed(x)) for x in retval]

    return retval





def mono4_to_gog4():
    gog_list = []
    base = [[3,2,1],[2,1],[1,]]
    for mono in mono_triangle4:
        temp = mono[1:]
        gog = []

        for t_row,b_row in zip(temp,base):
            diff = []
            for t,b in zip(t_row,b_row):
                diff.append(t-b)
            gog.append(diff)

        gog_list.append(gog)

    return gog_list

def mono5_to_gog5():
    gog_list = []
    base = [[4,3,2,1],[3, 2, 1], [2, 1], [1, ]]
    for mono in mono_triangle5:
        temp = mono[1:]
        gog = []

        for t_row, b_row in zip(temp, base):
            diff = []
            for t, b in zip(t_row, b_row):
                diff.append(t - b)
            gog.append(diff)

        gog_list.append(gog)

    return gog_list

#########




def num_rows(triangle):
    row_sums = [ sum(r) for r in triangle]

    if 0 in row_sums:
        return row_sums.index(0)
    else:
        return len(triangle)

def handle_file():

    gog_id_list = []
    gog_list = []
    magog_id_list = []
    magog_list = []

    with open('/bean/mac/research/IanCalaway/pyramid/gog-and-magog.csv', 'r') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            gog_id_list.append(row[0])
            gog_list.append(json.loads(row[1]))
            magog_id_list.append(row[2])
            magog_list.append(json.loads(row[3]))



    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('\section{Gog Only}')

    for id,gog in zip(gog_id_list, gog_list):
        if(num_rows(gog) == 2):
            print_gog(gog,id)


    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('\section{Magog Only}')

    for id,magog in zip(magog_id_list, magog_list):
        if(num_rows(magog) == 2):
            print_magog(magog, id)

######################
# Comparing Gog and Magog
def handle_three():
    mg = build_magog(3)

    print(len(mg), mg)

    print(mg[1])

    flip_mg = [[list(reversed(y)) for y in x] for x in mg]

    print(flip_mg)

    gog_only_list = []
    magog_only_list = []

    # for g in flip_mg:
    # print_magog(g,0)
    # print('')
    # if g not in gog3:
    #    magog_only_list.append(g)

    for idx, g in enumerate(gog3):
        print_gog(g, idx + 1)
        # print('')
        # if g not in flip_mg:
        #    gog_only_list.append(g)

        # for g in gog_only_list:
        #    print_gog(g, 0)

        # for g in magog_only_list:
        #    print_magog(g, 0)

def handle_four():
    gog4 = [x[1:] for x in mono_triangle5]

    #    xx = gog4[0]

    gog4a = [];

    for xx in gog4:
        gog4a.append([[z - len(y) + idx for idx, z in enumerate(y)] for y in xx])
        # gog4a = [[z-1 for z in y] for y in xx]

        # gog4a = [ rotate_triangle(x) for x in gog4a]

    mg = build_magog(4)

    # for xxx in mg:
    #    print(xxx)

    # print(len(mg), mg)

    # print(mg[1])

    # flip_gog = [[list(reversed(y)) for y in x] for x in gog4a]

    rotate_gog = [rotate_triangle(x) for x in gog4a]

    # flip_gog = [[list(reversed(y)) for y in x] for x in gog4a]
    flip_magog = [[list(reversed(y)) for y in x] for x in mg]

    # print(flip_mg)

    gog_only_list = []
    magog_only_list = []

    # for g1, g2 in zip(mg, gog4a):
    #    print(g1, '\t', g2)


    print('MAGOG UNBOUND')

    for g in mg:
        print(g)
        # print_magog(g,0)
        # print('')
        if g not in rotate_gog:
            magog_only_list.append(g)
            # else:
            #    print('in both', g)

    print('GOG UNBOUND')

    for g in rotate_gog:
        print('goggggg: ', [list(reversed(x)) for x in g])
        # print(g)
        # print_gog(g,0)
        # print('')
        if g not in mg:
            gog_only_list.append(g)

    print('STATS')

    print(len(mg), len(gog4a), len(rotate_gog))
    print(len(magog_only_list), len(gog_only_list))

    # print(mg[0:10])
    # print(flip_mg[0:10])
    # print(gog4a[0:10])


    my_gog = [[1, 1, 1, 1], [2, 2, 2], [3, 3], [4, ]],
    my_magog = [[1, 2, 3, 4], [1, 2, 3], [1, 2], [1, ]],

    my_gog3 = [[1, 1, 2], [1, 1], [1]]
    my_magog3 = [[1, 1, 1], [1, 1], [2]]

    # print('gog', my_gog3)
    print('gog rotate', rotate_triangle(my_gog3))
    # print('magog', my_magog3)
    if my_magog3 == rotate_triangle(my_gog3):
        print('equal')
    else:
        print('different')

    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('\section{Gog}')

    for idx, g in enumerate(rotate_gog):
        # print([list(reversed(x)) for x in g])
        print_gog([list(reversed(x)) for x in g], idx)

        #    for idx,g in enumerate(gog_only_list):
        #        #print([list(reversed(x)) for x in g])
        #        print_gog([list(reversed(x)) for x in g], idx)

    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('%%%%%%%%%%%%%%%%%%')
    print('\pagebreak')
    print('\section{Magog}')

    for idx, g in enumerate(mg):
        # print([list(reversed(x)) for x in g])
        print_magog([list(reversed(x)) for x in g], idx)

        #    for idx,g in enumerate(magog_only_list):
        #        #print([list(reversed(x)) for x in g])
        #        print_magog([list(reversed(x)) for x in g], idx)

#######################################


#for idx,g in enumerate(gog2):
#    print_gog(g, idx)
#    print('')

#for idx,g in enumerate(magog2):
#    print_magog(g, idx)
#    print(g)
#    print('')

#print(build_magog(2))
#print(magog2)


#mbl = magog_base_list(4)

#print(mbl)

#print(len(mbl))

#handle_three()

#handle_three()

#handle_four()

#handle_file()

##########

# kagogs = mono4_to_gog4()
# hash_map = dict()
# for idx,t in enumerate(kagogs):
#     #print(t)
#     base = []
#     print("t", t)
#     for tt in t:
#         temp = []
#         for ttt in tt:
#             print(ttt)
#             if ttt >  0:
#                 temp.append(1)
#             else:
#                 temp.append(0)
#         base.append(temp)
#     key = str(base)
#     hash_map[key] = base
# print(len(kagogs))
# print(len(hash_map))

#for k in hash_map:
#    print(k)


#    for x in reversed(t):
#        print(x)
#    print('')
#    print_magog(t,idx)

#for idx, t in enumerate(gog3):
#    print_gog(t,idx)

