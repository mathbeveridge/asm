asm4 = [[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]], [[0 , 1 , 0 , 0], [1, -1 , 1 , 0], [0 , 1 , 0 , 0], [0 , 0 , 0 , 1]], [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]], [[0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 1]], [[0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1]], [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], [[1 , 0 , 0 , 0], [0 , 0 , 1 , 0], [0 , 1, -1 , 1], [0 , 0 , 1 , 0]], [[0 , 1 , 0 , 0], [1, -1 , 1 , 0], [0 , 1, -1 , 1], [0 , 0 , 1 , 0]], [[0 , 0 , 1 , 0], [1 , 0 , 0 , 0], [0 , 1, -1 , 1], [0 , 0 , 1 , 0]], [[0 , 1 , 0 , 0], [0 , 0 , 1 , 0], [1 , 0, -1 , 1], [0 , 0 , 1 , 0]], [[0 , 0 , 1 , 0], [0 , 1 , 0 , 0], [1 , 0, -1 , 1], [0 , 0 , 1 , 0]], [[1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0]], [[0 , 1 , 0 , 0], [1, -1 , 0 , 1], [0 , 1 , 0 , 0], [0 , 0 , 1 , 0]], [[0 , 0 , 1 , 0], [1 , 0, -1 , 1], [0 , 1 , 0 , 0], [0 , 0 , 1 , 0]], [[0, 0, 0, 1], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0]], [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0]], [[0 , 0 , 1 , 0], [0 , 1, -1 , 1], [1 , 0 , 0 , 0], [0 , 0 , 1 , 0]], [[0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0]], [[1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 0]], [[0 , 1 , 0 , 0], [1, -1 , 1 , 0], [0 , 0 , 0 , 1], [0 , 1 , 0 , 0]], [[0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]], [[0 , 1 , 0 , 0], [0 , 0 , 1 , 0], [1, -1 , 0 , 1], [0 , 1 , 0 , 0]], [[0 , 0 , 1 , 0], [0 , 1 , 0 , 0], [1, -1 , 0 , 1], [0 , 1 , 0 , 0]], [[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0]], [[0 , 1 , 0 , 0], [1, -1 , 0 , 1], [0 , 0 , 1 , 0], [0 , 1 , 0 , 0]], [[0 , 0 , 1 , 0], [1 , 0, -1 , 1], [0 , 0 , 1 , 0], [0 , 1 , 0 , 0]], [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]], [[0 , 1 , 0 , 0], [0 , 0 , 0 , 1], [1, -1 , 1 , 0], [0 , 1 , 0 , 0]], [[0 , 0 , 1 , 0], [0 , 1, -1 , 1], [1, -1 , 1 , 0], [0 , 1 , 0 , 0]], [[0 , 0 , 0 , 1], [0 , 1 , 0 , 0], [1, -1 , 1 , 0], [0 , 1 , 0 , 0]], [[0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 1, 0, 0]], [[0, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0]], [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]], [[0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]], [[0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]], [[0 , 0 , 1 , 0], [0 , 1, -1 , 1], [0 , 0 , 1 , 0], [1 , 0 , 0 , 0]], [[0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0]], [[0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0]], [[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]]]


def getASM(n):
    return asm4


def getPartialSums(n):
    mat_list = []

    for asm in asm4:
        mat = []
        current_row = [0]*len(asm)
        for row in asm:
            for idx, x in enumerate(row):
                current_row[idx] = current_row[idx] + x
            mat.append(current_row.copy())
        mat_list.append(mat)

    return  mat_list


def getPartialSumTriangles(n):
    partial_mat_list = getPartialSums(n)
    triangle_list =  []


    for pm in partial_mat_list:
        triangle = []
        for i in range(n-1):
            temp = []
            for j in range(1,2+i):
                temp.append(pm[i][j])
            triangle.append(temp)

        triangle_list.append(triangle)

    return triangle_list
